/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vocabulary;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.FlavorEvent;
import java.awt.datatransfer.FlavorListener;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import java.util.ResourceBundle;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;
import javax.swing.UnsupportedLookAndFeelException;
import org.jdesktop.xswingx.PromptSupport;

/**
 *
 * @author Sasith
 */
public class Dictionary extends javax.swing.JFrame {

    public String selectedLang = "en";
    public static String searchResult[];
    String dateString;
    
    // For the confirmation of saving before exit or search for other
    String previousWord = "null";
    DefaultListModel previousModel = new DefaultListModel(); 
    //boolean hasToBeAdded = true;
    // End of confirmation

    // To store the objects of today word list. For the updating purposes later.
    ArrayList<SavedWord> listSavedWordObjects = new ArrayList<>();

    // setting today
//    DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
//    Calendar cal = Calendar.getInstance();
//    String today = dateFormat.format(cal.getTime()); //2014/08/06
    
    /**
     * Creates new form Dictionary
     */
    public Dictionary() {
        
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(MCQPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(MCQPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(MCQPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(MCQPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
                
        initComponents();
        
//        ClipboardMonitor();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        english_sinhala_group = new javax.swing.ButtonGroup();
        starts_with_group = new javax.swing.ButtonGroup();
        layeredPanel = new javax.swing.JLayeredPane();
        dictionaryPanel = new javax.swing.JPanel();
        textInput = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList_left = new javax.swing.JList<>();
        btnSearch = new javax.swing.JButton();
        radio_eng = new javax.swing.JRadioButton();
        radio_sin = new javax.swing.JRadioButton();
        btnAddToVocabulary = new javax.swing.JButton();
        btnSwitchVocabulary = new javax.swing.JButton();
        fakeBtn1 = new javax.swing.JButton();
        radio_starts_with = new javax.swing.JRadioButton();
        radio_contains = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList_right = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        vocabularyPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        selectedWordOut = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btnSwitchDictionary = new javax.swing.JButton();
        date_chooser = new com.toedter.calendar.JDateChooser();
        btnNextDay = new javax.swing.JButton();
        btnPreviousDay = new javax.swing.JButton();
        btnStartDailyTest = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        todayWordList = new javax.swing.JList<>();
        jButton2 = new javax.swing.JButton();
        fakeBtn2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        otherMeaningsOut = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        totalWordsLbl = new javax.swing.JLabel();
        youRememberOut = new javax.swing.JLabel();
        totalWordsOut = new javax.swing.JLabel();
        totalWordsLbl1 = new javax.swing.JLabel();
        totalWordsTodayOut = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        revisionsCompletedOut = new javax.swing.JLabel();
        answerSuccessRatioOut = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("vocabulary/Bundle"); // NOI18N
        setTitle(bundle.getString("Dictionary.title")); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        textInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textInputKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textInputKeyReleased(evt);
            }
        });

        jList_left.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList_leftMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jList_left);

        btnSearch.setText(bundle.getString("Dictionary.btnSearch.text")); // NOI18N
        btnSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        english_sinhala_group.add(radio_eng);
        radio_eng.setSelected(true);
        radio_eng.setText(bundle.getString("Dictionary.radio_eng.text")); // NOI18N
        radio_eng.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        radio_eng.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radio_engItemStateChanged(evt);
            }
        });

        english_sinhala_group.add(radio_sin);
        radio_sin.setText(bundle.getString("Dictionary.radio_sin.text")); // NOI18N
        radio_sin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        btnAddToVocabulary.setText(bundle.getString("Dictionary.btnAddToVocabulary.text")); // NOI18N
        btnAddToVocabulary.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAddToVocabulary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToVocabularyActionPerformed(evt);
            }
        });

        btnSwitchVocabulary.setText(bundle.getString("Dictionary.btnSwitchVocabulary.text")); // NOI18N
        btnSwitchVocabulary.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSwitchVocabulary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSwitchVocabularyActionPerformed(evt);
            }
        });

        fakeBtn1.setText(bundle.getString("Dictionary.fakeBtn1.text")); // NOI18N
        fakeBtn1.setEnabled(false);

        starts_with_group.add(radio_starts_with);
        radio_starts_with.setSelected(true);
        radio_starts_with.setText(bundle.getString("Dictionary.radio_starts_with.text")); // NOI18N
        radio_starts_with.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radio_starts_withMouseClicked(evt);
            }
        });

        starts_with_group.add(radio_contains);
        radio_contains.setText(bundle.getString("Dictionary.radio_contains.text")); // NOI18N
        radio_contains.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radio_containsMouseClicked(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPane1.setMinimumSize(new java.awt.Dimension(23, 100));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(300, 250));

        jList_right.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList_rightMouseClicked(evt);
            }
        });
        jList_right.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jList_rightPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jList_right);

        jButton1.setText(bundle.getString("Dictionary.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vocabulary/Vocab smaller.png"))); // NOI18N
        jLabel7.setText(bundle.getString("Dictionary.jLabel7.text")); // NOI18N

        javax.swing.GroupLayout dictionaryPanelLayout = new javax.swing.GroupLayout(dictionaryPanel);
        dictionaryPanel.setLayout(dictionaryPanelLayout);
        dictionaryPanelLayout.setHorizontalGroup(
            dictionaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dictionaryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dictionaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dictionaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnAddToVocabulary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                        .addComponent(textInput, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addGroup(dictionaryPanelLayout.createSequentialGroup()
                        .addComponent(radio_starts_with, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(radio_contains, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(dictionaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dictionaryPanelLayout.createSequentialGroup()
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(radio_eng)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radio_sin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSwitchVocabulary, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fakeBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 686, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dictionaryPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        dictionaryPanelLayout.setVerticalGroup(
            dictionaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dictionaryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dictionaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(dictionaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(textInput, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(radio_eng)
                        .addComponent(radio_sin))
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fakeBtn1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSwitchVocabulary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(dictionaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dictionaryPanelLayout.createSequentialGroup()
                        .addComponent(btnAddToVocabulary, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(dictionaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(radio_starts_with)
                            .addComponent(radio_contains)))
                    .addGroup(dictionaryPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText(bundle.getString("Dictionary.jLabel3.text")); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText(bundle.getString("Dictionary.jLabel4.text")); // NOI18N

        btnSwitchDictionary.setText(bundle.getString("Dictionary.btnSwitchDictionary.text")); // NOI18N
        btnSwitchDictionary.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSwitchDictionary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSwitchDictionaryActionPerformed(evt);
            }
        });

        date_chooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                date_chooserPropertyChange(evt);
            }
        });

        btnNextDay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vocabulary/R.png"))); // NOI18N
        btnNextDay.setText(bundle.getString("Dictionary.btnNextDay.text")); // NOI18N
        btnNextDay.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNextDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextDayActionPerformed(evt);
            }
        });

        btnPreviousDay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vocabulary/L.png"))); // NOI18N
        btnPreviousDay.setText(bundle.getString("Dictionary.btnPreviousDay.text")); // NOI18N
        btnPreviousDay.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPreviousDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousDayActionPerformed(evt);
            }
        });

        btnStartDailyTest.setText(bundle.getString("Dictionary.btnStartDailyTest.text")); // NOI18N
        btnStartDailyTest.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnStartDailyTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartDailyTestActionPerformed(evt);
            }
        });

        todayWordList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                todayWordListMouseClicked(evt);
            }
        });
        todayWordList.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                todayWordListPropertyChange(evt);
            }
        });
        todayWordList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                todayWordListKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                todayWordListKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(todayWordList);

        jButton2.setText(bundle.getString("Dictionary.jButton2.text")); // NOI18N
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        fakeBtn2.setText(bundle.getString("Dictionary.fakeBtn2.text")); // NOI18N
        fakeBtn2.setEnabled(false);

        otherMeaningsOut.setColumns(10);
        otherMeaningsOut.setLineWrap(true);
        otherMeaningsOut.setRows(3);
        otherMeaningsOut.setWrapStyleWord(true);
        jScrollPane2.setViewportView(otherMeaningsOut);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText(bundle.getString("Dictionary.jLabel6.text")); // NOI18N

        jButton3.setText(bundle.getString("Dictionary.jButton3.text")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vocabulary/Vocab small.png"))); // NOI18N
        jLabel1.setText(bundle.getString("Dictionary.jLabel1.text")); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText(bundle.getString("Dictionary.jLabel5.text")); // NOI18N

        totalWordsLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        totalWordsLbl.setText(bundle.getString("Dictionary.totalWordsLbl.text")); // NOI18N

        youRememberOut.setForeground(new java.awt.Color(0, 153, 0));
        youRememberOut.setText(bundle.getString("Dictionary.youRememberOut.text")); // NOI18N

        totalWordsOut.setForeground(new java.awt.Color(0, 153, 0));
        totalWordsOut.setText(bundle.getString("Dictionary.totalWordsOut.text")); // NOI18N

        totalWordsLbl1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        totalWordsLbl1.setText(bundle.getString("Dictionary.totalWordsLbl1.text")); // NOI18N

        totalWordsTodayOut.setForeground(new java.awt.Color(0, 153, 0));
        totalWordsTodayOut.setText(bundle.getString("Dictionary.totalWordsTodayOut.text")); // NOI18N

        jLabel2.setText(bundle.getString("Dictionary.jLabel2.text")); // NOI18N

        jLabel8.setText(bundle.getString("Dictionary.jLabel8.text")); // NOI18N

        revisionsCompletedOut.setForeground(new java.awt.Color(0, 153, 0));
        revisionsCompletedOut.setText(bundle.getString("Dictionary.revisionsCompletedOut.text")); // NOI18N

        answerSuccessRatioOut.setForeground(new java.awt.Color(0, 153, 0));
        answerSuccessRatioOut.setText(bundle.getString("Dictionary.answerSuccessRatioOut.text")); // NOI18N

        javax.swing.GroupLayout vocabularyPanelLayout = new javax.swing.GroupLayout(vocabularyPanel);
        vocabularyPanel.setLayout(vocabularyPanelLayout);
        vocabularyPanelLayout.setHorizontalGroup(
            vocabularyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vocabularyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(vocabularyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, vocabularyPanelLayout.createSequentialGroup()
                        .addComponent(btnPreviousDay, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(date_chooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnNextDay, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(vocabularyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(vocabularyPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 139, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addGroup(vocabularyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(vocabularyPanelLayout.createSequentialGroup()
                                .addComponent(fakeBtn2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSwitchDictionary, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnStartDailyTest, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(selectedWordOut)
                    .addComponent(jScrollPane2)
                    .addGroup(vocabularyPanelLayout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(vocabularyPanelLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(vocabularyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(totalWordsLbl1)
                            .addComponent(totalWordsLbl))
                        .addGap(18, 18, 18)
                        .addGroup(vocabularyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(youRememberOut, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                            .addComponent(totalWordsTodayOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(totalWordsOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(vocabularyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(vocabularyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(revisionsCompletedOut, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(answerSuccessRatioOut, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        vocabularyPanelLayout.setVerticalGroup(
            vocabularyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vocabularyPanelLayout.createSequentialGroup()
                .addGroup(vocabularyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(vocabularyPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(vocabularyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(vocabularyPanelLayout.createSequentialGroup()
                                .addGroup(vocabularyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnSwitchDictionary, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fakeBtn2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnStartDailyTest, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(selectedWordOut, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(vocabularyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, vocabularyPanelLayout.createSequentialGroup()
                                .addGroup(vocabularyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(totalWordsLbl)
                                    .addComponent(totalWordsTodayOut))
                                .addGap(34, 34, 34)
                                .addGroup(vocabularyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(youRememberOut)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, vocabularyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8)
                                .addComponent(revisionsCompletedOut))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, vocabularyPanelLayout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(vocabularyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnPreviousDay, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnNextDay, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(date_chooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(vocabularyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(vocabularyPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(vocabularyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(vocabularyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(totalWordsLbl1)
                                        .addComponent(totalWordsOut)
                                        .addComponent(jLabel2)
                                        .addComponent(answerSuccessRatioOut))
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(vocabularyPanelLayout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(71, 71, 71)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                                .addGap(82, 82, 82)))))
                .addContainerGap())
        );

        layeredPanel.setLayer(dictionaryPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layeredPanel.setLayer(vocabularyPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layeredPanelLayout = new javax.swing.GroupLayout(layeredPanel);
        layeredPanel.setLayout(layeredPanelLayout);
        layeredPanelLayout.setHorizontalGroup(
            layeredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dictionaryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layeredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(vocabularyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layeredPanelLayout.setVerticalGroup(
            layeredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dictionaryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layeredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(vocabularyPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(layeredPanel)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(layeredPanel)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddToVocabularyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToVocabularyActionPerformed
        // For the confirmation of saving before exit or search for other
        previousWord = "null";
        addToVocabulary();
    }//GEN-LAST:event_btnAddToVocabularyActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
//        textInput.requestFocus();

// Setting the nimbuzz


// Closing the nimbuzz
        SQLiteVocabulary connect = new SQLiteVocabulary();
        connect.ConnectSQLite();
        connect.readData();

        vocabularyPanel.setVisible(false);
        dictionaryPanel.setVisible(true);

        Font font = new Font("Iskoola pota", Font.PLAIN, 16);
        todayWordList.setFont(font);
        selectedWordOut.setFont(font);
        otherMeaningsOut.setFont(font);

        // To set the Title icon
        Image i = null;
        try {
            i = ImageIO.read(getClass().getResource("/vocabulary/V_Icon.png"));
        } catch (IOException ex) {
            Logger.getLogger(Dictionary.class.getName()).log(Level.SEVERE, null, ex);
        }
        setIconImage(i);

        
    }//GEN-LAST:event_formWindowOpened

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        if (selectedLang.equals("en")) {
            searchActionEng();
//            plainSearchEngToEng();
        } else {
            searchActionSin();
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void textInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textInputKeyPressed
        clearJListRight();
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (selectedLang.equals("en")) {
                searchActionEng();
//                plainSearchEngToEng();
            } else {
                searchActionSin();
            }
        }
    }//GEN-LAST:event_textInputKeyPressed

    private void textInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textInputKeyReleased
                // To ask for add to vocabulary before deleting. 
        if (evt.getKeyCode() == KeyEvent.VK_DELETE || evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            if (!previousWord.equals("null")){
                //JOptionPane.showMessageDialog(null, "You didn't add the prevous word to the vocabulary");
                // Asking to save
                if (JOptionPane.showConfirmDialog(null, 
                    "You didn't save this word to the vocabulary.\n Would you like to save ?", "Want to keep remember ?", 
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.INFORMATION_MESSAGE) == JOptionPane.YES_OPTION){
                    //System.exit(0);
                    textInput.setText(previousWord);
                    // To use when asking for save. 
                    jList_right.setModel(previousModel);
                    //btnSearch.doClick();
                    
                    previousWord = "null";
                    addToVocabulary();
                    // releasing after save
                    
                } else {
                    // releasing anyway coz user don't need to save
                    previousWord = "null";
                }
            }
        }
        
        // After confirmation or for the first time or after adding to vocabulary
        if (selectedLang.equals("en")) {
            try {
                predictActionEng();
                //searchActionEng();
            } catch (Exception e) {
            }
        } else {
            try {
                predictActionSin();
                //searchActionSin();
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_textInputKeyReleased

    private void radio_engItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radio_engItemStateChanged

        try {
            DefaultListModel dmlTemp = (DefaultListModel) jList_left.getModel();
            dmlTemp.removeAllElements();

        } catch (Exception e) {
            System.out.println("Exception in clearing models");
        }

        if (radio_eng.isSelected()) {
            selectedLang = "en";
            setLocale(selectedLang);
            textInput.setText("");
        } else {
            selectedLang = "si";
            setLocale(selectedLang);
            textInput.setText("");
        }
    }//GEN-LAST:event_radio_engItemStateChanged

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        setLocale("en");
    }//GEN-LAST:event_formWindowClosed

    private void btnSwitchVocabularyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSwitchVocabularyActionPerformed
        vocabularyPanel.setVisible(true);
        dictionaryPanel.setVisible(false);
        setTitle("My Vocabulary"); 

        Date date = new Date();
        date.getTime();
        date_chooser.setDate(date);
        
        // To populate statistics
        getProgressStatistics();
        todayWordList.requestFocus();
    }//GEN-LAST:event_btnSwitchVocabularyActionPerformed

    private void btnSwitchDictionaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSwitchDictionaryActionPerformed
        vocabularyPanel.setVisible(false);
        dictionaryPanel.setVisible(true);
        setTitle("My Dictionary"); 
    }//GEN-LAST:event_btnSwitchDictionaryActionPerformed

    private void btnNextDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextDayActionPerformed
        try {
            DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
            Calendar cal = Calendar.getInstance();
            String currentDay = dateFormat.format(date_chooser.getDate()); //2014/08/06

            
            cal.setTime(dateFormat.parse(currentDay));   //dateString
            cal.add(Calendar.DATE, 1);  // number of days to add
            
            date_chooser.setDate(cal.getTime());
            
        } catch (ParseException ex) {
            Logger.getLogger(Dictionary.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnNextDayActionPerformed

    private void jList_leftMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList_leftMouseClicked
        String selected = jList_left.getSelectedValue();
        textInput.setText(selected.trim());
        if (selectedLang.equals("en")) {
            searchActionEng();
        } else {
            searchActionSin();
        }
    }//GEN-LAST:event_jList_leftMouseClicked

    private void date_chooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_date_chooserPropertyChange

        selectedWordOut.setText("");
        otherMeaningsOut.setText("");
//        PromptSupport.setPrompt("Click on the list.", selectedWordOut);
        DefaultListModel lm;

        try {
            Date dateFromDateChooser = date_chooser.getDate();
            dateString = String.format("%1$tY/%1$tm/%1$td", dateFromDateChooser);

            SQLiteVocabulary a = new SQLiteVocabulary();
            a.ConnectSQLite();
            /* metheana meka nothibunoth table eka create karanna kalin setModel method eka run wela
            sql error ekak enawa.  */
            lm = a.getTodayVocabulary(dateString, false);
            todayWordList.setModel(lm);

             //to select the first element if not null
            if (!lm.isEmpty()) {
                todayWordList.setSelectedIndex(0);
                todayVocabularyItemClicked();
            }
        } catch (Exception e) {
            System.out.println("Date Chooser error.");
        }
        
    }//GEN-LAST:event_date_chooserPropertyChange

    private void todayWordListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_todayWordListMouseClicked
        todayVocabularyItemClicked();
    }//GEN-LAST:event_todayWordListMouseClicked

    private void btnStartDailyTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartDailyTestActionPerformed
        MCQPane mcq = new MCQPane(dateString);
        mcq.setVisible(true);
    }//GEN-LAST:event_btnStartDailyTestActionPerformed

    private void radio_starts_withMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radio_starts_withMouseClicked
        System.out.println("Mouse Clicked A");
        if (selectedLang.equals("en")) {
            predictActionEng();
        } else {
            predictActionSin();
        }
    }//GEN-LAST:event_radio_starts_withMouseClicked

    private void radio_containsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radio_containsMouseClicked
        System.out.println("Mouse Clicked B");
        if (selectedLang.equals("en")) {
            predictActionEng();
        } else {
            predictActionSin();
        }
    }//GEN-LAST:event_radio_containsMouseClicked

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        textInput.requestFocus();
    }//GEN-LAST:event_formWindowActivated

    private void jList_rightMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList_rightMouseClicked

        if (jList_right.getModel().getSize() != 0) {  // to avoid crashing when nothing is there to select
            if (radio_eng.isSelected()) {
                radio_sin.setSelected(true);
                //            setLocale("si");
                textInput.setText(searchResult[jList_right.getSelectedIndex()].trim());
                searchActionSin();
                predictActionSin();
            } else {
                radio_eng.setSelected(true);
                //            setLocale("en");
                textInput.setText(searchResult[jList_right.getSelectedIndex()].trim());
                searchActionEng();
                predictActionEng();
            }
        }
    }//GEN-LAST:event_jList_rightMouseClicked

    private void todayWordListPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_todayWordListPropertyChange
        
        if (todayWordList.getModel().getSize() == 0) {
            btnStartDailyTest.setEnabled(false);
        } else {
            btnStartDailyTest.setEnabled(true);
        }
    }//GEN-LAST:event_todayWordListPropertyChange

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        About about = new About();
        about.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        About about = new About();
        about.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void btnPreviousDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousDayActionPerformed
        try {
            DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
            Calendar cal = Calendar.getInstance();
            String currentDay = dateFormat.format(date_chooser.getDate()); //2014/08/06

            
            cal.setTime(dateFormat.parse(currentDay));   //dateString
            cal.add(Calendar.DATE, -1);  // number of days to add
            
            date_chooser.setDate(cal.getTime());
            
        } catch (ParseException ex) {
            Logger.getLogger(Dictionary.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnPreviousDayActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        selectedWordOut.setText("");
        otherMeaningsOut.setText("");
//        PromptSupport.setPrompt("Click on the list.", selectedWordOut);
        DefaultListModel lm;

        try {
            Date dateFromDateChooser = date_chooser.getDate();
            dateString = String.format("%1$tY/%1$tm/%1$td", dateFromDateChooser);

            SQLiteVocabulary a = new SQLiteVocabulary();
            a.ConnectSQLite();
            /* metheana meka nothibunoth table eka create karanna kalin setModel method eka run wela
            sql error ekak enawa.  */
            lm = a.getTodayVocabulary(dateString, true);
            todayWordList.setModel(lm);

             //to select the first element if not null
            if (!lm.isEmpty()) {
                todayWordList.setSelectedIndex(0);
                todayVocabularyItemClicked();
            }
        } catch (Exception e) {
            System.out.println("Date Chooser error.");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
        int response = 10;
        if (previousWord.equals("null")) {
            dispose();
        } else { 
            response = JOptionPane.showConfirmDialog(null, 
            "You didn't save the last word to the vocabulary.\n Would you like to save ?", "Exit without saving to vocabulary ?", 
            JOptionPane.YES_NO_CANCEL_OPTION,
            JOptionPane.INFORMATION_MESSAGE);
        }
        
        if (response == JOptionPane.YES_OPTION) {
            addToVocabulary();
            dispose();
        } else if (response == JOptionPane.NO_OPTION) {
            dispose();
        }
                
                
//        if (JOptionPane.showConfirmDialog(null, 
//            "You didn't save the new word to the vocabulary.\n Would you like to save ?", "Exit without saving to vocabulary ?", 
//            JOptionPane.YES_NO_CANCEL_OPTION,
//            JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION){
//            System.exit(0);
//        }
    

    }//GEN-LAST:event_formWindowClosing

    private void jList_rightPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jList_rightPropertyChange
        // For the purpose of asking for save
//        if (jList_right.getModel().getSize()>0) {
//            if (selectedLang.equals("en")) {
//                previousWord = textInput.getText().trim().toLowerCase();
//            } else {
//                previousWord = textInput.getText().trim();
//            }
//        } else {
//            previousWord = "null";
//        }
    }//GEN-LAST:event_jList_rightPropertyChange

    private void todayWordListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_todayWordListKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            btnNextDay.doClick();
        } else if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            btnPreviousDay.doClick();
        }
    }//GEN-LAST:event_todayWordListKeyPressed

    private void todayWordListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_todayWordListKeyReleased
        todayVocabularyItemClicked();
    }//GEN-LAST:event_todayWordListKeyReleased

    /**
     * @param args the command line arguments
     */
    //public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        // Below part coppied to constructor
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(MCQPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(MCQPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(MCQPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(MCQPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }

        // coppied part to constructor ends. 
        
        
        //</editor-fold>
//        JFrame.setDefaultLookAndFeelDecorated(true);
//        try {
//            UIManager.setLookAndFeel(new SubstanceRavenGraphiteLookAndFeel());
//        } catch (Exception e) {
//            System.out.println("Substance Raven Graphite failed to initialize");
//        }
        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Dictionary().setVisible(true);
//
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel answerSuccessRatioOut;
    private javax.swing.JButton btnAddToVocabulary;
    private javax.swing.JButton btnNextDay;
    private javax.swing.JButton btnPreviousDay;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnStartDailyTest;
    private javax.swing.JButton btnSwitchDictionary;
    private javax.swing.JButton btnSwitchVocabulary;
    private com.toedter.calendar.JDateChooser date_chooser;
    private javax.swing.JPanel dictionaryPanel;
    private javax.swing.ButtonGroup english_sinhala_group;
    private javax.swing.JButton fakeBtn1;
    private javax.swing.JButton fakeBtn2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JList<String> jList_left;
    private javax.swing.JList<String> jList_right;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLayeredPane layeredPanel;
    private javax.swing.JTextArea otherMeaningsOut;
    private javax.swing.JRadioButton radio_contains;
    private javax.swing.JRadioButton radio_eng;
    private javax.swing.JRadioButton radio_sin;
    private javax.swing.JRadioButton radio_starts_with;
    private javax.swing.JLabel revisionsCompletedOut;
    private javax.swing.JTextField selectedWordOut;
    private javax.swing.ButtonGroup starts_with_group;
    private javax.swing.JTextField textInput;
    private javax.swing.JList<String> todayWordList;
    private javax.swing.JLabel totalWordsLbl;
    private javax.swing.JLabel totalWordsLbl1;
    private javax.swing.JLabel totalWordsOut;
    private javax.swing.JLabel totalWordsTodayOut;
    private javax.swing.JPanel vocabularyPanel;
    private javax.swing.JLabel youRememberOut;
    // End of variables declaration//GEN-END:variables

    public void getProgressStatistics () {
        SQLiteVocabulary v = new SQLiteVocabulary ();
        int tempAnswers [] = v.returnStats();
        double successRatio = 0;
        // Array comes in order: totlaWords, totalWordsToday, rememberCount, rememberOutOf, correctCountTotal, wrongCountTotal, revisionsDone
        totalWordsOut.setText(String.valueOf(tempAnswers[0]));
        totalWordsTodayOut.setText(String.valueOf(tempAnswers[1]));
        youRememberOut.setText(String.valueOf(tempAnswers[2])+ " out of "+String.valueOf(tempAnswers[3]));
        double correct = tempAnswers[4];
        double wrong = tempAnswers[5];
        successRatio = (correct/(correct+wrong))*100;
        DecimalFormat df=new DecimalFormat("0.00");
        String formated = df.format(successRatio); 
        answerSuccessRatioOut.setText(formated+"%");
        revisionsCompletedOut.setText(String.valueOf(tempAnswers[6]));    
    }
    public void searchActionEng() {
        String userInput = textInput.getText().trim();
        try {
        SQLiteDictionary tfh = new SQLiteDictionary();
        String answer = tfh.plainSearchEng(userInput);
        DefaultListModel dlm1 = new DefaultListModel();
        String answerSplited[] = answer.split("/");  //for character by character split
        searchResult = answerSplited;

        for (int i = 0; i < answerSplited.length; i++) {
            dlm1.addElement(" " + (i + 1) + ". " + answerSplited[i].trim());
        }

        Font font = new Font("Iskoola pota", Font.PLAIN, 16);
        jList_right.setFont(font);
        jList_right.setModel(dlm1);
        
        // To use when asking for save. 
        previousModel = dlm1;
        
        // For the confirmation of saving before exit or search for other
        previousWord = userInput;
                
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "\'"+userInput+"\' is not available in the dictionary. \nPlease try from the suggestions.");
        }
    }

    public void searchActionSin() {
        String userInput = textInput.getText().trim();
        try {
        SQLiteDictionary tfh = new SQLiteDictionary();
        String answer = tfh.plainSearchSin(userInput);

        String answerSplited[] = answer.split("/");  //for character by character split
        searchResult = answerSplited;
        DefaultListModel dlm1 = new DefaultListModel();

        for (int i = 0; i < answerSplited.length; i++) {
            dlm1.addElement(" " + (i + 1) + ". " + answerSplited[i].trim());
        }
        Font font = new Font("Times New Roman", Font.PLAIN, 16);
        jList_right.setFont(font);
        jList_right.setModel(dlm1);
        
        // To use when asking for save. 
        previousModel = dlm1;
        
        // For the confirmation of saving before exit or search for other
        previousWord = userInput;
        
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "The word is not available in the dictionary. \nPlease try from the suggestions.");
        }
    }

    public void predictActionEng() {
        String userInput = textInput.getText().trim().toLowerCase();

        SQLiteDictionary tfh = new SQLiteDictionary();
        ArrayList list = tfh.wordsPredictEng(userInput, radio_starts_with.isSelected());

        DefaultListModel dlm2 = new DefaultListModel();

        for (int i = 0; i < list.size(); i++) {
            dlm2.addElement(" " + list.get(i));
        }

        Font font = new Font("Iskoola pota", Font.PLAIN, 16);
        jList_left.setFont(font);
        jList_left.setModel(dlm2);
    }

    public void predictActionSin() {
        String userInput = textInput.getText().trim();

        SQLiteDictionary tfh = new SQLiteDictionary();
        ArrayList list = tfh.wordsPredictSin(userInput, radio_starts_with.isSelected());

        DefaultListModel dlm2 = new DefaultListModel();

        for (int i = 0; i < list.size(); i++) {
            dlm2.addElement(" " + list.get(i));
        }

        Font font = new Font("Iskoola pota", Font.PLAIN, 16);
        jList_left.setFont(font);
        jList_left.setModel(dlm2);
    }

    public void addToVocabulary() {

        String word = "";
        int selectedIndex = 0;

        if (selectedLang.equals("en")) {
            word = textInput.getText().trim().toLowerCase();
        } else {
            word = textInput.getText().trim();
        }

        SelectMeaning sm = new SelectMeaning();

        if (textInput.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Enter a word to the search field.");
        } else if (!textInput.getText().trim().isEmpty() && jList_right.getModel().getSize() == 0) {
            JOptionPane.showMessageDialog(null, "Please select a word from the suggestions.");
        } else if (jList_right.getModel().getSize() == 1) {
            SQLiteVocabulary handler = new SQLiteVocabulary();
            String onlyMeaning = jList_right.getModel().getElementAt(0).substring(4).trim();
            handler.insertWord(word, onlyMeaning, "", this.selectedLang);
            JOptionPane.showMessageDialog(null, "Word added to your reminder list.");
        } else {
            sm.setVisible(true);
            sm.setModel(word, (DefaultListModel) jList_right.getModel(), this.selectedLang);
            // saving to the database happens at the select window after selecting. 
        }

    }

    public void clearJListRight() {
        DefaultListModel dlm3 = new DefaultListModel();
        dlm3.removeAllElements();
        jList_right.setModel(dlm3);
    }

    public void setLocale(String lang) {
        try {
            String country = "";
            if (lang.equals("en")) {
                country = "US";
            } else {
                country = "LK";
            }

            java.util.Locale loc = new java.util.Locale(lang, country);
            ResourceBundle rb = ResourceBundle.getBundle("vocabulary/Bundle", loc);
            Font font = new Font(rb.getString("Locale.lang.font"), Font.PLAIN, 14);
            UIManager.getLookAndFeelDefaults().put("defaultFont", font);

            textInput.setFont(font);
            textInput.enableInputMethods(true);
            textInput.getInputContext().selectInputMethod(new Locale(lang, country));
        } catch (Exception e) {
            System.out.println("Locale error");
        }
    }

    private void plainSearchEngToEng() {

//        jText_eng_eng.setText("");
        SQLiteDictionary a = new SQLiteDictionary();
        ResultSet rs = null;
        rs = a.plainSearchEngToEng(textInput.getText().trim());
        try {
            while (rs.next()) {
                String temp = rs.getString("definition").replace("\n", "").replace("\r", "");
//                jText_eng_eng.append(rs.getString("wordtype") + "  " + temp + "\n\n");
            }
            textInput.requestFocus();
        } catch (SQLException ex) {
            Logger.getLogger(Dictionary.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Not complete
    public void populateTodayWordsList() {

        SQLiteVocabulary sqliteDic = new SQLiteVocabulary();
        this.listSavedWordObjects = sqliteDic.returnTodayWordsObjectList();

        DefaultListModel dlmTodayWords = new DefaultListModel();

        for (int i = 0; i < this.listSavedWordObjects.size(); i++) {
            SavedWord sw;
            sw = listSavedWordObjects.get(i);
            dlmTodayWords.addElement(" " + sw.word);
        }

        Font font = new Font("Iskoola pota", Font.PLAIN, 16);
        todayWordList.setFont(font);
        todayWordList.setModel(dlmTodayWords);
    }
   
    private void todayVocabularyItemClicked() {
    ResultSet rs = null;
        if (!todayWordList.isSelectionEmpty()) {
            try {
                SQLiteVocabulary a = new SQLiteVocabulary();
                rs = a.getFullRecord(todayWordList.getSelectedValue().trim());

                while (rs.next()) {
                    selectedWordOut.setText(rs.getString("selected_meaning"));
                    otherMeaningsOut.setText(rs.getString("other_meanings"));
                }
            } catch (SQLException ex) {
                Logger.getLogger(Dictionary.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 
    }

    
    
    //ClipboardMonitor
    
    public void ClipboardMonitor() {
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                }

               //JFrame frame = new JFrame("Testing");
//                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//                frame.setLayout(new BorderLayout());
//                frame.add(new TestPane());
//                frame.pack();
//                frame.setLocationRelativeTo(null);
//                frame.setVisible(true);
//                TestPane testPane = new TestPane ();
//                String temp = testPane.textArea.getText();
//                
//                textInput.setText(temp);
            }
        });
    }

    public class TestPane extends JPanel {

        private JTextArea textArea;
        
        public TestPane() {
            textArea = new JTextArea(10, 10);
            
            setLayout(new BorderLayout());
            add(new JScrollPane(textArea));
            Toolkit.getDefaultToolkit().getSystemClipboard().addFlavorListener(new FlavorListener() {
                @Override
                public void flavorsChanged(FlavorEvent e) {
                    setText(getClipboardContents());

                    // from here
                               
//                    if(frame.getState()!=frame.NORMAL) { 
//                        frame.setState(frame.NORMAL); 
//                    }
//                    frame.setAlwaysOnTop(true);
//                    frame.toFront();
//                    frame.repaint();
//                    frame.requestFocus();
//                    frame.setAlwaysOnTop(false);

                    System.out.println("Executed this 2");
                    
                    // to here is from http://stackoverflow.com/questions/309023/how-to-bring-a-window-to-the-front
                }
            });
            Thread t = new Thread(new ContentsMonitor());
            t.setDaemon(true);
            t.start();
        }

        @Override
        public Dimension getPreferredSize() {
            return new Dimension(200, 200);
        }

        protected String getClipboardContents() {
            String text = null;
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            if (clipboard.isDataFlavorAvailable(DataFlavor.stringFlavor)) {
                try {
                    Transferable contents = clipboard.getContents(TestPane.this);
                    text = (String) contents.getTransferData(DataFlavor.stringFlavor);
                } catch (UnsupportedFlavorException | IOException ex) {
                    ex.printStackTrace();
                }
            }
            return text;
        }

        protected void setText(final String text) {
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    textArea.setText(text);
                }
            });
        }

        public class ContentsMonitor implements Runnable {

            @Override
            public void run() {
                String previous = getClipboardContents();
                while (true) {
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                    }
                    String text = getClipboardContents();
                    if (text != null && !text.equals(previous)) {
                        setText(text);
                        previous = text;
                    }
                }
            }
        }
    }
    

}
